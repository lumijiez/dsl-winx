~A package defines a full set of specifications for a general set of features~
package Database {

    ~An interface holds an abstract structure to be implemented in a specification~
    critical interface Database {

        // lol
        critical public GetUserList(FLOAT[] x, STRING ag) {
            @ExecTime : "10s";
            @MaxReturnVals : "10s";
            return "CustomDataType" x;
        }
    }

    ~A specification is a concrete implementation of requirement specifications~
    ~It might or might not implement an interface~
    specification DatabaseAccess implements Database {

        ~This is a concrete non-functional specification~
        critical DatabaseAccessMember {
            optional @UserHasAdminAccess;
            critical @UserIsNotBanned;

            result optional DatabaseAdminPanel;
            result critical DatabaseVisualizerPanel;
            result Clock;
        }

        ~This is a concrete functional specification, it might implement an interface~
        critical public GetUserList(FLOAT[] x, STRING ag) implements DatabaseAccessImpl {
            @ExecTime : "10s";
            @MaxReturnVals : "10s";
            return INT x;
        }

        critical private GetUserdList(FLOAT[] x, STRING ag) implements Database {
                    @ExecTime : "10s";
                    @MaxReturnVals : "10s";
                    return INT x;
                }

        critical public GetUserdfList(FLOAT[] x, STRING ag) implements Database {
                    @ExecTime : "10s";
                    @MaxReturnVals : "10s";
                    return INT x;
                }

        optional public GetUsesfrList(FLOAT[] x, STRING ag) implements Database {
                    @ExecTime : "10s";
                    @MaxReturnVals : "10s";
                    return INT x;
                }

    }
}


