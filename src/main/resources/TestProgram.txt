package HospitalManagementSystem {

    critical interface PatientRecords {
        critical protected FetchPatientDetails(FLOAT patientId) {
            @ExecTime : "3s";
            @MaxReturnVals : "1";
            @DataFormat : "ID: %patientId,DOB: %dob";
            @DataPrivacy : "High";
            return "PatientDetails" details;
        }

        critical private UpdatePatientRecord(FLOAT patientId, STRING updates) {
            @ExecTime : "3s";
            @DataIntegrity : "High";
            @DataConcurrency : "Serializable";
            return "UpdateConfirmation" confirmation;
        }
    }

    critical interface AppointmentSystem {
        critical public ScheduleAppointment(FLOAT patientId, STRING dateTime, STRING doctorId) {
            @ExecTime : "4s";
            @Notification : "Email";
            @DataValidation : "TimeSlotAvailability";
            return "AppointmentConfirmation" confirmation;
        }

        optional private CancelAppointment(FLOAT appointmentId) {
            @ExecTime : "2s";
            @CancellationFee : "NoChargeWithin24h";
            return "CancellationConfirmation" status;
        }
    }

    critical interface StaffManagement {
        critical protected FetchStaffDetails(FLOAT staffId) {
            @ExecTime : "4s";
            @MaxReturnVals : "1";
            @DataFormat : "Staff ID: %staffId, Role: %role";
            @AccessLevel : "HR_Only";
            return "StaffDetails" detailList;
        }

        critical public UpdateStaffRecord(FLOAT staffId, STRING updates) {
            @ExecTime : "4s";
            @TransactionType : "Atomic";
            @DataIntegrity : "EnsureConsistency";
            return "UpdateConfirmation" status;
        }
y
        optional private AssignStaff(FLOAT staffId, STRING departmentId) {
            @ExecTime : "3s";
            @AuditTrail : "Enabled";
            @DataLogging : "Detailed";
            return "AssignmentConfirmation" confirmation;
        }
    }

    specification ComprehensiveMedicalRecords implements PatientRecords {

        critical ComprehensiveRecordsMember {
            optional @UserHasAdminAccess;
            critical @UserIsNotInactive;

            result optional AdminPanel;
            result critical MedicalRecordsDashboard;
            result Clock;
        }

        critical public FetchPatientDetails(FLOAT patientId) implements PatientRecords {
            @ExecTime : "3s";
            @DataCache : "Enabled";
            @CacheExpiry : "24h";
            return "PatientDetails" patientDetails;
        }

        critical public UpdatePatientRecord(FLOAT patientId, STRING updates) implements PatientRecords {
            @ExecTime : "3s";
            @RecordLocking : "Optimistic";
            return "UpdateConfirmation" status;
        }

        critical public ScheduleAppointment(FLOAT patientId, STRING dateTime, STRING doctorId) implements AppointmentSystem {
            @ExecTime : "4s";
            @OverbookingPolicy : "Disallow";
            return "AppointmentConfirmation" schedule;
        }

        optional public CancelAppointment(FLOAT appointmentId) implements AppointmentSystem {
            @ExecTime : "2s";
            @RefundPolicy : "FullIf48hPrior";
            return "CancellationConfirmation" status;
        }
    }

    specification StaffAdministration implements StaffManagement {

        critical StaffAdminMember {
            optional @UserHasHRAccess;
            critical @UserIsVerified;

            result optional HRPanel;
            result critical StaffManagementDashboard;
            result Clock;
        }

        critical public FetchStaffDetails(FLOAT staffId) implements StaffManagement {
            @ExecTime : "4s";
            @DataAccess : "SecureQuery";
            @FilterSensitiveData : "Enabled";
            return "StaffDetails" staffDetails;
        }

        critical public UpdateStaffRecord(FLOAT staffId, STRING updates) implements StaffManagement {
            @ExecTime : "4s";
            @ChangeManagement : "Controlled";
            @DataHistory : "Logged";
            return "UpdateConfirmation" status;
        }

        optional private AssignStaff(FLOAT staffId, STRING departmentId) implements StaffManagement {
            @ExecTime : "3s";
            @PermissionCheck : "DepartmentHeadApproval";
            @RealTimeUpdate : "Required";
            return "AssignmentConfirmation" status;
        }
    }
}
